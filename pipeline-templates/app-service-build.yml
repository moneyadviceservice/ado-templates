jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

      - checkout: self

      - script: |
          echo "pwd:"
          pwd
          echo "ls:"
          ls $(Build.SourcesDirectory)
          ls $(Build.Repository.Name)/app/MaPSCDAService/MaPSCDAService/
        displayName: 'debug'

      - task: UseDotNet@2
        displayName: 'Install .NET Core 8.x'
        inputs:
          version: 8.x
        
      - task: DotNetCoreCLI@2
        displayName: 'Restore projects'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          vstsFeed: 'MaPS Digital/MHPD-Shared'
          projects: '$(Build.Repository.Name)/app/${{ parameters.packagePath }}/${{ parameters.packagePath }}.sln'

      - task: DotNetCoreCLI@2
        displayName: 'Build Project'
        inputs:
          command: 'build'
          projects: |
            '$(projectsToRestoreAndBuild)'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          projects: 'tests/**/*.csproj'
          arguments: '--configuration $(buildConfiguration) --logger trx --collect "Code coverage" --results-directory "$(Build.SourcesDirectory)/TestResults/Coverage/"'
          publishTestResults: false

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: '**/*.trx'
          searchFolder: '$(Build.Repository.Name)/$(Build.SourcesDirectory)/TestResults/Coverage/'

      - task: PublishCodeCoverageResults@2
        displayName: 'Publish Code Coverage Results'
        inputs:
          summaryFileLocation: '$(Build.Repository.Name)/$(Build.SourcesDirectory)/TestResults/Coverage/'

      - task: DotNetCoreCLI@2
        displayName: 'Publish'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '$(Build.Repository.Name)/app/**/${{ parameters.packagePath }}.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish build artifacts'
        inputs:
          PathtoPublish: $(Build.Repository.Name)/'$(Build.ArtifactStagingDirectory)/${{ parameters.packagePath }}.zip'
          ArtifactName: 'drop'
          publishLocation: 'Container'

      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'ADO-PWD-Connection'
          KeyVaultName:  ${{ parameters.scriptEnvVars.VAULT_NAME }}
          SecretsFilter: 'bot-azure-pat' 

      - checkout: ado-templates
        path: ado-templates

      - script: |
          echo "pwd:"
          pwd
          echo "ls:"
          ls $(Build.SourcesDirectory)
          # chmod +x $(Build.SourcesDirectory)/ado-templates/pipeline-scripts/commit-specs.sh
          # $(Build.SourcesDirectory)/ado-templates/pipeline-scripts/commit-specs.sh
        displayName: 'Commit OpenAPI Spec'
        env:
          PAT_TOKEN: '$(bot-azure-pat)'
          BRANCH_NAME: ${{ parameters.scriptEnvVars.BRANCH_NAME }}
          SERVICE_NAME: ${{ parameters.scriptEnvVars.SERVICE_NAME }}
          SERVICE_PATH: ${{ parameters.scriptEnvVars.SERVICE_PATH }}