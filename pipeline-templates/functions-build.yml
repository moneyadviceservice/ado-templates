jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    workspace:
      clean: all

    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core 8.x'
        inputs:
          version: '8.x'

      - task: DotNetCoreCLI@2
        displayName: 'Restore Project'
        inputs:
          command: 'restore'
          projects: 'app/${{ parameters.packagePath }}.sln'
          feedsToUse: 'select'
          vstsFeed: 'MaPS Digital/MHPD-Shared'

      - task: DotNetCoreCLI@2
        displayName: 'Build Project'
        inputs:
          command: 'build'
          projects: 'app/${{ parameters.packagePath }}/${{ parameters.packagePath }}.csproj'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          projects: 'tests/${{ parameters.packagePath }}UnitTests/${{ parameters.packagePath }}UnitTests.csproj'
          arguments: '--configuration $(buildConfiguration) --logger trx --collect "Code coverage" --results-directory "$(Build.SourcesDirectory)/TestResults/Coverage/"'
          publishTestResults: false
    
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/*.trx'
          searchFolder: '$(Build.SourcesDirectory)/TestResults/Coverage/'

      - task: PublishCodeCoverageResults@2
        displayName: 'Publish Code Coverage Results'
        inputs:
          summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/'

      - task: DotNetCoreCLI@2
        displayName: 'Publish'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'app/**/*.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish build artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.packagePath }}.zip'
          ArtifactName: 'drop'
          publishLocation: 'Container'

      - script: |
          echo "pwd:"
          pwd
          echo "ls:"
          ls $(Build.SourcesDirectory)
          chmod +x $(Build.SourcesDirectory)/pipeline-scripts/commit-specs.sh
          $(Build.SourcesDirectory)/pipeline-scripts/commit-specs.sh
        displayName: 'Commit OpenAPI Spec'
        condition: and(succeeded(), ne('${{ parameters.commitOpenApiSpec }}', 'false'))
        env:
          PAT_TOKEN: ${{ parameters.scriptEnvVars.PAT_TOKEN }}
          BRANCH_NAME: ${{ parameters.scriptEnvVars.BRANCH_NAME }}
          SERVICE_NAME: ${{ parameters.scriptEnvVars.SERVICE_NAME }}
          SERVICE_PATH: ${{ parameters.scriptEnvVars.SERVICE_PATH }}