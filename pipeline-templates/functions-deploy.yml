parameters:
  - name: poolName
    type: string
    default: ''
  - name: vmImageName
    type: string
    default: 'ubuntu-latest'
  - name: functionAppName
    type: string
    default: ''
  - name: slotName
    type: string
    default: ''
  - name: env
    type: string
    default: ''
  - name: packagePath
    type: string
    default: ''
  - name: serviceName
    type: string
    default: ''

jobs:
  - job: Deploy
    displayName: 'Deploy to App Service'
    ${{ if ne(parameters.poolName, '') }}:
      pool:
        name: ${{ parameters.poolName }}
    ${{ if eq(parameters.poolName, '') }}:
      pool:
        vmImage: ${{ parameters.vmImageName }}
    steps:
      - script: |
         echo "Running on custom pool: ${{ parameters.poolName }}"

      - task: DownloadPipelineArtifact@2
        displayName: 'Download Build Artifact'
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          targetPath: '$(Pipeline.Workspace)/drop'
        
      - task: AzureFunctionApp@1
        displayName: 'Azure Function App Deploy: $(functionAppName)'
        condition: and(succeeded(), eq('${{ parameters.env }}', 'prod'), ne('${{ parameters.serviceName }}', ''))
        inputs:
          azureSubscription: $(subscription)
          appType: functionApp
          appName: $(functionAppName)
          package: '$(Pipeline.Workspace)/drop/${{ parameters.serviceName }}.zip'

      - task: AzureFunctionApp@1
        displayName: 'Azure Function App Deploy: $(functionAppName)'
        condition: and(succeeded(), eq('${{ parameters.env }}', 'prod'), eq('${{ parameters.serviceName }}', ''))
        inputs:
          azureSubscription: $(subscription)
          appType: functionApp
          appName: $(functionAppName)
          package: '$(Pipeline.Workspace)/drop/${{ parameters.packagePath }}.zip'

      - task: AzureWebApp@1
        displayName: 'Deploy to Staging Slot'
        condition: and(succeeded(), eq('${{ parameters.env }}', 'prod'), eq('${{ parameters.serviceName }}', ''))
        inputs:
          azureSubscription: '$(subscription)'
          appType: functionApp
          appName: '$(functionAppName)'
          deployToSlotOrASE: true
          resourceGroupName: '$(resourceGroupName)'
          slotName: '$(slotName)'
          package: '$(Pipeline.Workspace)/drop/${{ parameters.packagePath }}.zip'
          # runtimeStack: 'DOTNETCORE|8.0'

      - task: AzureWebApp@1
        displayName: 'Deploy to Staging Slot'
        condition: and(succeeded(), eq('${{ parameters.env }}', 'prod'), ne('${{ parameters.serviceName }}', ''))
        inputs:
          azureSubscription: '$(subscription)'
          appType: functionApp
          appName: '$(functionAppName)'
          deployToSlotOrASE: true
          resourceGroupName: '$(resourceGroupName)'
          slotName: '$(slotName)'
          package: '$(Pipeline.Workspace)/drop/${{ parameters.serviceName }}.zip'

      - task: AzureAppServiceManage@0
        displayName: 'Swap to Production slot'
        condition: and(succeeded(), eq('${{ parameters.env }}', 'prod'))
        inputs:
          azureSubscription: '$(subscription)'
          appType: functionApp
          WebAppName: '$(functionAppName)'
          ResourceGroupName: '$(resourceGroupName)'
          SourceSlot: '$(slotName)'
          SwapWithProduction: true
